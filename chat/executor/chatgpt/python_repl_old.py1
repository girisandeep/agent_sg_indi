import pexpect
import uuid
import subprocess
import sys

class PythonDockerREPL:
    def __init__(self, image="blazing-python-ds", container_name=None, verbose=False):
        self.image = image
        self.container_name = container_name or f"pyrepl-{uuid.uuid4().hex[:6]}"
        self.verbose = verbose

        # Clean up any leftover container with same name
        subprocess.run(
            ["docker", "rm", "-f", self.container_name],
            stdout=subprocess.DEVNULL,
            stderr=subprocess.DEVNULL
        )

        # Start the Docker container with Python interactive shell
        self.proc = pexpect.spawn(
            f"docker run -i --rm --name {self.container_name} {self.image} python3 -i",
            encoding="utf-8",
            timeout=10
        )

        if self.verbose:
            self.proc.logfile = sys.stdout  # Logs live output to terminal

        self.proc.expect(">>>")  # Wait for Python prompt

    def run(self, code):
        code = code.strip()
        input_lines = [line.rstrip() for line in code.splitlines() if line.strip()]

        # Send each line manually like in REPL
        for line in input_lines:
            self.proc.sendline(line)
        self.proc.sendline("")  # Force execution

        # Wait for the prompt again
        self.proc.expect(">>> ")

        # Capture everything up to the prompt
        raw_output = self.proc.before.strip().splitlines()

        # Clean echoed lines + prompt lines
        cleaned = []
        for line in raw_output:
            stripped = line.strip()
            if not stripped or stripped.startswith((">>>", "...")):
                continue
            if stripped in input_lines:
                continue
            cleaned.append(stripped)

        return "\n".join(cleaned).strip()

        
    def reset(self):
        """Resets REPL state by restarting container."""
        self.close()
        self.__init__(image=self.image, verbose=self.verbose)

    def close(self):
        """Cleanly exit the REPL and stop the container."""
        if self.proc.isalive():
            self.proc.sendline("exit()")
            try:
                self.proc.expect(pexpect.EOF)
            except pexpect.exceptions.ExceptionPexpect:
                pass
            self.proc.close()

import textwrap

if __name__ == "__main__":
    repl = PythonDockerREPL(verbose=True)

    code = textwrap.dedent("""
        def greet(name):
            print(f"Hi {name}!")
    """)

    def1 = repl.run(code)
    run1 = repl.run("greet('Sandeep')")

    repl.close()

    print("-----------------")
    print(def1)
    print('--')
    print(run1)